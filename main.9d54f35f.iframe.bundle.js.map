{"version":3,"file":"main.9d54f35f.iframe.bundle.js","mappings":"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","sources":["webpack://@tatuarvela/wisp-win-classic-theme/./src/themes/common/cursors/cursor.ts","webpack://@tatuarvela/wisp-win-classic-theme/./src/themes/common/utils.ts","webpack://@tatuarvela/wisp-win-classic-theme/./src/themes/common/generateDitheredBackground.ts","webpack://@tatuarvela/wisp-win-classic-theme/./src/themes/common/controls/buildScrollbars.ts","webpack://@tatuarvela/wisp-win-classic-theme/./src/themes/common/controls/buildTimeInput.ts","webpack://@tatuarvela/wisp-win-classic-theme/./src/themes/common/controls/generateResizeHandle.ts","webpack://@tatuarvela/wisp-win-classic-theme/./src/themes/common/controls/buildControls.ts","webpack://@tatuarvela/wisp-win-classic-theme/./src/themes/common/elements/buildElements.ts","webpack://@tatuarvela/wisp-win-classic-theme/./src/themes/common/generateColorFilter.ts","webpack://@tatuarvela/wisp-win-classic-theme/./src/themes/common/window/resizeBorder.ts","webpack://@tatuarvela/wisp-win-classic-theme/./src/themes/common/window/buildWindow.ts"],"sourcesContent":["import { css } from 'styled-components';\n\nimport aesthetic from './aesthetic.png';\nimport defaultCursor from './default.png';\nimport eResize from './e-resize.png';\nimport pointer from './pointer.png';\nimport progress from './progress.png';\nimport sResize from './s-resize.png';\nimport seResize from './se-resize.png';\nimport swResize from './sw-resize.png';\nimport text from './text.png';\n\ntype CursorOption =\n  | 'aesthetic'\n  | 'default'\n  | 'e-resize'\n  | 'n-resize'\n  | 'ne-resize'\n  | 'nw-resize'\n  | 'pointer'\n  | 'progress'\n  | 's-resize'\n  | 'se-resize'\n  | 'sw-resize'\n  | 'text'\n  | 'w-resize';\n\ntype UrlAndCoordinates = [url: string, x: number, y: number];\n\nconst cursors: Record<CursorOption, UrlAndCoordinates> = {\n  aesthetic: [aesthetic, 0, 0],\n  default: [defaultCursor, 0, 0],\n  'e-resize': [eResize, 10, 4],\n  'n-resize': [sResize, 4, 10],\n  'ne-resize': [swResize, 8, 8],\n  'nw-resize': [seResize, 8, 8],\n  pointer: [pointer, 0, 0],\n  progress: [progress, 0, 0],\n  's-resize': [sResize, 5, 10],\n  'se-resize': [seResize, 8, 8],\n  'sw-resize': [swResize, 8, 8],\n  text: [text, 4, 0],\n  'w-resize': [eResize, 10, 5],\n};\n\nconst cursor = (option: CursorOption) => {\n  const cursor = cursors[option];\n  return css`\n    cursor:\n      url('${cursor[0]}') ${cursor[1]} ${cursor[2]},\n      auto;\n  `;\n};\n\nexport default cursor;\n","import { css } from 'styled-components';\n\nimport generateBorders from './generateBorders';\nimport { ThemeVariables } from './types';\n\nexport const fontFamily = \"'Microsoft Sans Serif', sans-serif;\";\n\n// FIXME\nexport const generateGroovedStyles = (themeVariables: ThemeVariables) => css`\n  border: 1px solid ${themeVariables.shade4};\n  box-shadow:\n    inset 1px 1px 0 0 ${themeVariables.shade1},\n    0 1px 0 0 ${themeVariables.shade1},\n    1px 0 0 0 ${themeVariables.shade1},\n    1px 1px 0 0 ${themeVariables.shade1};\n`;\n\nexport const generateIndentedStyles = (themeVariables: ThemeVariables) => css`\n  box-shadow: ${generateBorders(\n      1,\n      themeVariables.shade4,\n      themeVariables.shade1\n    )},\n    ${generateBorders(2, themeVariables.shade5, themeVariables.shade2)};\n`;\n\nexport const generateButtonStyles = (themeVariables: ThemeVariables) => {\n  const activeStyles = css`\n    box-shadow: ${generateBorders(\n        1,\n        themeVariables.shade5,\n        themeVariables.shade5\n      )},\n      ${generateBorders(2, themeVariables.shade4, themeVariables.shade4)};\n\n    > * {\n      display: inline-block;\n      position: relative;\n      left: 1px;\n      top: 1px;\n    }\n  `;\n\n  const focusStyles = css`\n    box-shadow:\n      ${generateBorders(1, themeVariables.shade5, themeVariables.shade5)},\n      inset -2px -2px ${themeVariables.shade5},\n      inset 2px 2px ${themeVariables.shade1},\n      inset -3px -3px ${themeVariables.shade4};\n  `;\n\n  return css`\n    background: ${themeVariables.shade3};\n    border: none;\n\n    box-shadow: ${generateBorders(\n        1,\n        themeVariables.shade1,\n        themeVariables.shade5\n      )},\n      ${generateBorders(2, 'transparent', themeVariables.shade4)};\n\n    &:focus {\n      ${focusStyles}\n    }\n\n    ${(props) =>\n      (props as unknown as { active?: boolean })?.active && activeStyles};\n    &:active {\n      ${activeStyles}\n    }\n  `;\n};\n\nexport const generateSmallButtonStyles = (themeVariables: ThemeVariables) => {\n  const activeStyles = css`\n    box-shadow: ${generateBorders(\n        1,\n        themeVariables.shade4,\n        themeVariables.shade4\n      )},\n      ${generateBorders(2, themeVariables.shade3, themeVariables.shade2)};\n\n    > * {\n      position: relative;\n      left: 1px;\n      top: 1px;\n    }\n  `;\n\n  return css`\n    background: ${themeVariables.shade3};\n    border: none;\n\n    box-shadow: ${generateBorders(\n        1,\n        themeVariables.shade2,\n        themeVariables.shade5\n      )},\n      ${generateBorders(2, themeVariables.shade1, themeVariables.shade4)};\n\n    ${(props) =>\n      (props as unknown as { active?: boolean })?.active && activeStyles};\n    &:active {\n      ${activeStyles}\n    }\n  `;\n};\n","import { css } from 'styled-components';\n\nconst generateCheckerboardImage = (color1: string, color2: string) => {\n  const size = 1;\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  canvas.width = size * 2;\n  canvas.height = size * 2;\n\n  ctx.fillStyle = color1;\n  ctx.fillRect(0, 0, size, size);\n  ctx.fillRect(size, size, size, size);\n\n  ctx.fillStyle = color2;\n  ctx.fillRect(size, 0, size, size);\n  ctx.fillRect(0, size, size, size);\n\n  return canvas.toDataURL();\n};\n\nconst generateDitheredBackground = (color1: string, color2: string) => {\n  const image = generateCheckerboardImage(color1, color2);\n  return css`\n    background-image: url('${image}');\n    background-size: 2px 2px;\n    image-rendering: pixelated;\n  `;\n};\n\nexport default generateDitheredBackground;\n","import { ScrollableContentViewProps } from '@tatuarvela/wisp';\nimport { css } from 'styled-components';\n\nimport generateDitheredBackground from '../generateDitheredBackground';\nimport down from '../icons/down.png';\nimport left from '../icons/left.png';\nimport right from '../icons/right.png';\nimport up from '../icons/up.png';\nimport { ThemeBuilderConfig, ThemeVariables } from '../types';\nimport { generateSmallButtonStyles } from '../utils';\n\nconst SCROLLBAR_WIDTH = 16;\n\nconst buildScrollableContentView = (\n  themeVariables: ThemeVariables\n) => css<ScrollableContentViewProps>`\n  box-sizing: border-box;\n  background: ${themeVariables.shade1};\n  height: calc(\n    100% - ${({ horizontal }) => (horizontal ? SCROLLBAR_WIDTH : 0)}px\n  );\n  width: calc(100% - ${({ vertical }) => (vertical ? SCROLLBAR_WIDTH : 0)}px);\n  overscroll-behavior: none;\n  overflow-x: ${({ horizontal }) => (horizontal ? 'scroll' : 'clip')};\n  overflow-y: ${({ vertical }) => (vertical ? 'scroll' : 'clip')};\n  scrollbar-width: none;\n`;\n\nconst buildScrollButton = (themeVariables: ThemeVariables, icon: string) => css`\n  ${generateSmallButtonStyles(themeVariables)}\n  height: ${SCROLLBAR_WIDTH}px;\n  width: ${SCROLLBAR_WIDTH}px;\n  flex-shrink: 0;\n  position: relative;\n\n  &:before {\n    background-image: url('${icon}');\n    content: '';\n    height: 8px;\n    image-rendering: pixelated;\n    left: 4px;\n    position: absolute;\n    top: 4px;\n    width: 8px;\n  }\n\n  &:active {\n    &:before {\n      top: 5px;\n      left: 5px;\n    }\n  }\n`;\n\nconst buildScrollbarVerticalTrack = (themeVariables: ThemeVariables) => css`\n  height: calc(100%);\n  position: relative;\n  ${generateDitheredBackground(themeVariables.shade3, themeVariables.shade1)};\n`;\n\nconst buildScrollbarVerticalThumb = (themeVariables: ThemeVariables) => css`\n  ${generateSmallButtonStyles(themeVariables)}\n  width: ${SCROLLBAR_WIDTH}px;\n  height: var(--height);\n  top: var(--top);\n  position: absolute;\n  box-sizing: border-box;\n`;\n\nconst buildScrollbarHorizontalTrack = (themeVariables: ThemeVariables) => css`\n  width: calc(100%);\n  position: relative;\n  ${generateDitheredBackground(themeVariables.shade3, themeVariables.shade1)};\n`;\n\nconst buildScrollbarHorizontalThumb = (themeVariables: ThemeVariables) => css`\n  ${generateSmallButtonStyles(themeVariables)}\n  height: ${SCROLLBAR_WIDTH}px;\n  width: var(--width);\n  left: var(--left);\n  position: absolute;\n  box-sizing: border-box;\n`;\n\nconst buildScrollbarVerticalWrapper = (themeVariables: ThemeVariables) => css`\n  background: ${themeVariables.shade3};\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  height: var(--height);\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: ${SCROLLBAR_WIDTH}px;\n`;\n\nconst buildScrollbarHorizontalWrapper = (themeVariables: ThemeVariables) => css`\n  background: ${themeVariables.shade3};\n  bottom: 0;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  height: ${SCROLLBAR_WIDTH}px;\n  left: 0;\n  position: absolute;\n  width: var(--width);\n`;\n\nconst buildScrollbars = (\n  themeVariables: ThemeVariables\n): ThemeBuilderConfig['controls'] => ({\n  ScrollableContentView: buildScrollableContentView(themeVariables),\n  ScrollbarVerticalWrapper: buildScrollbarVerticalWrapper(themeVariables),\n  ScrollbarHorizontalWrapper: buildScrollbarHorizontalWrapper(themeVariables),\n  ScrollUpButton: buildScrollButton(themeVariables, up),\n  ScrollDownButton: buildScrollButton(themeVariables, down),\n  ScrollRightButton: buildScrollButton(themeVariables, right),\n  ScrollLeftButton: buildScrollButton(themeVariables, left),\n  ScrollbarVerticalTrack: buildScrollbarVerticalTrack(themeVariables),\n  ScrollbarVerticalThumb: buildScrollbarVerticalThumb(themeVariables),\n  ScrollbarHorizontalTrack: buildScrollbarHorizontalTrack(themeVariables),\n  ScrollbarHorizontalThumb: buildScrollbarHorizontalThumb(themeVariables),\n});\n\nexport default buildScrollbars;\n","import {\n  TimeInputButtonProps,\n  TimeInputFieldProps,\n  TimeInputValueProps,\n} from '@tatuarvela/wisp';\nimport { css } from 'styled-components';\n\nimport generateBorders from '../generateBorders';\nimport tinyDown from '../icons/tiny-down.png';\nimport tinyUp from '../icons/tiny-up.png';\nimport { ThemeBuilderConfig, ThemeVariables } from '../types';\nimport { fontFamily, generateIndentedStyles } from '../utils';\n\nconst TimeInputControl = css`\n  display: flex;\n  height: 20px;\n  gap: 2px;\n  width: 100%;\n`;\n\nconst buildTimeInputField = (\n  themeVariables: ThemeVariables\n) => css<TimeInputFieldProps>`\n  ${generateIndentedStyles(themeVariables)}\n  background: ${themeVariables.shade1};\n  border: none;\n  display: flex;\n  width: 100%;\n  padding: 2px;\n`;\n\nconst buildTimeInputValue = (\n  themeVariables: ThemeVariables\n) => css<TimeInputValueProps>`\n  border: none;\n  color: ${(props) =>\n    props.disabled ? themeVariables.textDisabled : themeVariables.text};\n  font-size: 11px;\n  font-family: ${fontFamily};\n  outline: none;\n  width: 14px;\n\n  &::selection {\n    color: white;\n    background: ${(props) =>\n      props.disabled\n        ? themeVariables.windowPassiveBackground\n        : themeVariables.active};\n  }\n`;\n\nconst TimeInputSeparator = css`\n  width: 4px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  &:before {\n    content: ':';\n    position: absolute;\n  }\n`;\n\nconst buildTimeInputButtons = (themeVariables: ThemeVariables) => css`\n  display: flex;\n  flex-direction: column;\n  top: 2px;\n  position: relative;\n`;\n\nconst generateButtonStyles = (themeVariables: ThemeVariables) => {\n  const activeStyles = css`\n    box-shadow: ${generateBorders(\n        1,\n        themeVariables.shade5,\n        themeVariables.shade1\n      )},\n      ${generateBorders(2, themeVariables.shade4, themeVariables.shade2)};\n\n    > * {\n      display: inline-block;\n      position: relative;\n      left: 1px;\n      top: 1px;\n    }\n  `;\n\n  return css`\n    background: ${themeVariables.shade3};\n    border: none;\n\n    box-shadow: ${generateBorders(\n        1,\n        themeVariables.shade1,\n        themeVariables.shade5\n      )},\n      ${generateBorders(2, themeVariables.shade2, themeVariables.shade4)};\n\n    ${(props) =>\n      (props as unknown as { active?: boolean })?.active && activeStyles};\n    &:active {\n      ${activeStyles}\n    }\n  `;\n};\n\nconst buildTimeInputIncreaseButton = (\n  themeVariables: ThemeVariables\n) => css<TimeInputButtonProps>`\n  ${generateButtonStyles(themeVariables)}\n  background: ${themeVariables.shade3};\n  border: none;\n  padding: 2px;\n  box-sizing: border-box;\n  height: 8px;\n  position: relative;\n  width: 15px;\n\n  &:before {\n    background-image: url('${tinyUp}');\n    content: '';\n    display: block;\n    height: 3px;\n    image-rendering: pixelated;\n    left: 3px;\n    position: relative;\n    top: -1px;\n    width: 3px;\n  }\n`;\n\nconst buildTimeInputDecreaseButton = (\n  themeVariables: ThemeVariables\n) => css<TimeInputButtonProps>`\n  ${generateButtonStyles(themeVariables)}\n  background: ${themeVariables.shade3};\n  border: none;\n  padding: 2px;\n  box-sizing: border-box;\n  height: 8px;\n  position: relative;\n  width: 15px;\n\n  &:before {\n    background-image: url('${tinyDown}');\n    content: '';\n    display: block;\n    height: 3px;\n    image-rendering: pixelated;\n    left: 3px;\n    position: relative;\n    top: -1px;\n    width: 3px;\n  }\n`;\n\nconst buildTimeInput = (\n  themeVariables: ThemeVariables\n): ThemeBuilderConfig['controls'] => ({\n  TimeInputControl: TimeInputControl,\n  TimeInputField: buildTimeInputField(themeVariables),\n  TimeInputValue: buildTimeInputValue(themeVariables),\n  TimeInputSeparator: TimeInputSeparator,\n  TimeInputButtons: buildTimeInputButtons(themeVariables),\n  TimeInputIncreaseButton: buildTimeInputIncreaseButton(themeVariables),\n  TimeInputDecreaseButton: buildTimeInputDecreaseButton(themeVariables),\n});\n\nexport default buildTimeInput;\n","import { css } from 'styled-components';\n\nimport { ThemeVariables } from '../types';\n\nconst generateResizeHandle = (themeVariables: ThemeVariables) => {\n  const size = 14;\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  canvas.width = size;\n  canvas.height = size;\n\n  ctx.fillStyle = themeVariables.shade3;\n  ctx.fillRect(0, 0, 14, 14);\n\n  const strokeLine = (x1: number, y1: number, x2: number, y2: number) => {\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  };\n  const strokeMirroredLine = (a: number, b: number) => strokeLine(a, b, b, a);\n\n  ctx.strokeStyle = themeVariables.shade1;\n  strokeMirroredLine(0, 13);\n\n  ctx.strokeStyle = themeVariables.shade4;\n  strokeMirroredLine(1, 13);\n  strokeMirroredLine(2, 13);\n\n  ctx.strokeStyle = themeVariables.shade1;\n  strokeMirroredLine(4, 13);\n\n  ctx.strokeStyle = themeVariables.shade4;\n  strokeMirroredLine(5, 13);\n  strokeMirroredLine(6, 13);\n\n  ctx.strokeStyle = themeVariables.shade1;\n  strokeMirroredLine(8, 13);\n\n  ctx.strokeStyle = themeVariables.shade4;\n  strokeMirroredLine(9, 13);\n  strokeMirroredLine(10, 13);\n\n  return css`\n    background-image: url('${canvas.toDataURL()}');\n    background-size: 14px 14px;\n    image-rendering: pixelated;\n  `;\n};\n\nexport default generateResizeHandle;\n","import {\n  CheckboxProps,\n  ComboBoxButtonProps,\n  ComboBoxOptionsProps,\n  ControlWrapperProps,\n  DividerProps,\n  LabelProps,\n  ListBoxOptionsProps,\n  MenuBarThrobberProps,\n  ProgressBarFillProps,\n  StatusBarSectionProps,\n  TextareaElementProps,\n  TextInputElementProps,\n  ToolbarButtonProps,\n  ToolbarProps,\n} from '@tatuarvela/wisp';\nimport { css } from 'styled-components';\n\nimport cursor from '../cursors/cursor';\nimport generateBorders from '../generateBorders';\nimport check from '../icons/check.png';\nimport down from '../icons/down.png';\nimport throbberActive from '../icons/throbber-active.gif';\nimport throbberPassive from '../icons/throbber-passive.png';\nimport { ThemeBuilderConfig, ThemeVariables } from '../types';\nimport {\n  fontFamily,\n  generateButtonStyles,\n  generateGroovedStyles,\n  generateIndentedStyles,\n  generateSmallButtonStyles,\n} from '../utils';\nimport buildScrollbars from './buildScrollbars';\nimport buildTimeInput from './buildTimeInput';\nimport generateResizeHandle from './generateResizeHandle';\n\nconst buildAddressBar = () => css`\n  align-items: center;\n  box-sizing: border-box;\n  display: flex;\n  font-family: sans-serif;\n  font-size: 12px;\n  gap: 4px;\n  padding: 2px;\n`;\n\nconst buildAddressBarInput = (themeVariables: ThemeVariables) => css`\n  ${cursor('text')};\n  border: none;\n  ${generateIndentedStyles(themeVariables)}\n\n  outline: none;\n  width: 100%;\n  flex-grow: 1;\n  font-size: 12px;\n`;\n\nconst buildButton = (themeVariables: ThemeVariables) => css`\n  ${cursor('default')};\n  ${generateButtonStyles(themeVariables)}\n\n  border-radius: 0;\n  font-size: 11px;\n  padding: 4px 10px 4px 10px;\n  user-select: none;\n\n  &:active {\n    padding: 5px 9px 3px 11px;\n  }\n`;\n\nconst buildCheckboxWrapper = () => {\n  const inlineStyle = css`\n    align-items: center;\n  `;\n\n  return css`\n    align-items: center;\n    box-sizing: border-box;\n    display: flex;\n    gap: 8px;\n    padding: 2px;\n\n    ${(props: ControlWrapperProps) => props.inlineLabel && inlineStyle}\n  `;\n};\n\nconst buildCheckbox = (themeVariables: ThemeVariables) => {\n  const checkedStyle = css`\n    &:before {\n      background-image: url('${check}');\n      content: '';\n      height: 7px;\n      image-rendering: pixelated;\n      left: 3px;\n      position: absolute;\n      top: 3px;\n      width: 7px;\n    }\n  `;\n\n  return css<CheckboxProps>`\n    ${generateIndentedStyles(themeVariables)}\n    background: ${themeVariables.shade1};\n    box-sizing: border-box;\n    height: 13px;\n    width: 13px;\n    position: relative;\n\n    ${(props) => props.checked && checkedStyle}\n  `;\n};\n\nconst buildComboBoxControl = (themeVariables: ThemeVariables) => css`\n  ${generateIndentedStyles(themeVariables)}\n  padding: 2px;\n  display: flex;\n  height: 18px;\n`;\n\nconst buildComboBoxInput = (themeVariables: ThemeVariables) => css`\n  outline: none;\n  font-size: 12px;\n  border: none;\n  flex-grow: 1;\n  background: ${themeVariables.shade1};\n  padding: 2px 4px;\n`;\n\nconst buildComboBoxButton = (\n  themeVariables: ThemeVariables\n) => css<ComboBoxButtonProps>`\n  ${cursor('default')};\n  ${generateSmallButtonStyles(themeVariables)}\n\n  width: 16px;\n  position: relative;\n  box-sizing: border-box;\n\n  &:before {\n    background-image: url('${down}');\n    content: '';\n    height: 8px;\n    image-rendering: pixelated;\n    left: 4px;\n    position: absolute;\n    top: 5px;\n    width: 8px;\n  }\n\n  &:active {\n    &:before {\n      top: 6px;\n      left: 5px;\n    }\n  }\n`;\n\nconst buildComboBoxOptions = () => css<ComboBoxOptionsProps>`\n  background: white;\n  border: 1px solid black;\n  box-sizing: border-box;\n  display: ${(props) => `${props.open ? 'block' : 'none'}`};\n  margin: 0;\n  padding: 0;\n  position: relative;\n`;\n\nconst buildComboBoxOption = (themeVariables: ThemeVariables) => css`\n  list-style: none;\n  font-family: sans-serif;\n  font-size: 12px;\n  padding: 4px;\n  ${cursor('pointer')};\n  &:hover {\n    background: ${themeVariables.active};\n    color: white;\n  }\n`;\n\nconst buildDivider = (themeVariables: ThemeVariables) => {\n  const verticalStyle = css`\n    height: 100%;\n    width: 2px;\n    margin: 0 4px;\n  `;\n\n  const horizontalStyle = css`\n    height: 2px;\n    width: 100%;\n    margin: 4px 0;\n  `;\n\n  return css<DividerProps>`\n    box-shadow: ${generateBorders(\n      1,\n      themeVariables.shade4,\n      themeVariables.shade1\n    )};\n    ${({ vertical }) => (vertical ? verticalStyle : horizontalStyle)}\n  `;\n};\n\nconst buildFieldset = (themeVariables: ThemeVariables) => css`\n  ${generateGroovedStyles(themeVariables)}\n  font-family: sans-serif;\n`;\n\nconst buildFieldsetLegend = (themeVariables: ThemeVariables) => css`\n  background: ${themeVariables.shade3};\n  font-size: 12px;\n`;\n\nconst buildLabel = (themeVariables: ThemeVariables) => css<LabelProps>`\n  color: ${(props) =>\n    props.disabled ? themeVariables.textDisabled : themeVariables.text};\n  font-size: 12px;\n  font-family: sans-serif;\n  margin: 0;\n`;\n\nconst buildListBoxControl = (themeVariables: ThemeVariables) =>\n  buildComboBoxControl(themeVariables);\n\nconst buildListBoxValue = (themeVariables: ThemeVariables) =>\n  buildComboBoxInput(themeVariables);\n\nconst buildListBoxButton = (themeVariables: ThemeVariables) =>\n  buildComboBoxButton(themeVariables);\n\nconst buildListBoxOptions = () => css<ListBoxOptionsProps>`\n  ${buildComboBoxOptions()}\n`;\n\nconst buildListBoxOption = (themeVariables: ThemeVariables) =>\n  buildComboBoxOption(themeVariables);\n\nconst buildMenuBar = (themeVariables: ThemeVariables) => css`\n  ${generateGroovedStyles(themeVariables)}\n\n  box-sizing: border-box;\n  display: flex;\n  font-size: 14px;\n  font-family: sans-serif;\n  flex-shrink: 0;\n  height: 25px;\n  padding: 0;\n  text-align: left;\n  user-select: none;\n  white-space: nowrap;\n  width: 100%;\n  margin-bottom: -1px;\n`;\n\nconst buildMenuBarThrobber = (\n  themeVariables: ThemeVariables\n) => css<MenuBarThrobberProps>`\n  align-self: end;\n  background-color: black;\n  background-image: ${({ isAnimated }) =>\n    isAnimated ? `url('${throbberActive}')` : `url('${throbberPassive}')`};\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 22px 22px;\n  box-shadow:\n    0 1px 0 ${themeVariables.shade4},\n    -1px 0 0 ${themeVariables.shade1},\n    -1px 1px 0 ${themeVariables.shade1},\n    -2px 0 0 ${themeVariables.shade4};\n  height: calc(100% - 1px);\n  image-rendering: pixelated;\n  margin-left: auto;\n  width: 38px;\n  position: relative;\n`;\n\nconst buildProgressBar = (themeVariables: ThemeVariables) => css`\n  --step-width: 8px;\n  box-shadow: ${generateBorders(\n    1,\n    themeVariables.shade4,\n    themeVariables.shade1\n  )};\n  padding: 2px;\n  box-sizing: border-box;\n  font-size: 12px;\n  height: 16px;\n  max-height: 100%;\n  outline: none;\n  overflow: hidden;\n`;\n\nconst buildProgressBarFill = (themeVariables: ThemeVariables) => {\n  const indeterminateStyle = css`\n    animation-duration: 1.5s;\n    animation-name: indeterminate-progress-bar-fill-animation;\n    animation-iteration-count: infinite;\n    animation-timing-function: steps(30, end);\n\n    @keyframes indeterminate-progress-bar-fill-animation {\n      0% {\n        transform: translateX(-50%);\n      }\n      100% {\n        transform: translateX(200%);\n      }\n    }\n  `;\n\n  const makeBlockStyle = (color: string) => css`\n    background-color: ${color};\n  `;\n\n  const makeStepsStyle = (color: string) => css`\n    background-image: repeating-linear-gradient(\n      to right,\n      ${color} 0px,\n      ${color} calc(var(--step-width) - 1px),\n      transparent calc(var(--step-width) - 1px),\n      transparent var(--step-width)\n    );\n  `;\n\n  return css<ProgressBarFillProps>`\n    height: 100%;\n    width: ${(props) => (props.disabled ? '0%' : 'calc(var(--width))')};\n    ${(props) =>\n      props.variant === 'block'\n        ? makeBlockStyle(themeVariables.shade5)\n        : makeStepsStyle(\n            props.disabled ? themeVariables.shade5 : themeVariables.active\n          )}\n    image-rendering: pixelated;\n\n    ${(props) =>\n      !props.disabled && props.isIndeterminate && indeterminateStyle});\n  `;\n};\n\nconst buildStatusBar = () => css`\n  bottom: 0;\n  box-sizing: border-box;\n  display: flex;\n  margin-top: auto;\n  font-size: 14px;\n  flex-shrink: 0;\n  gap: 2px;\n  height: 22px;\n  padding: 2px 0 0;\n  width: 100%;\n  position: relative;\n`;\n\nconst buildResizeHandle = (themeVariables: ThemeVariables) => css`\n  bottom: -4px;\n  ${cursor('se-resize')}\n  height: 18px;\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  right: -4px;\n  width: 18px;\n  overflow: clip;\n  ${generateResizeHandle(themeVariables)}\n`;\n\nconst buildStatusBarSection = (\n  themeVariables: ThemeVariables\n) => css<StatusBarSectionProps>`\n  border: none;\n  box-shadow: ${generateBorders(\n    1,\n    themeVariables.shade4,\n    themeVariables.shade1\n  )};\n  display: flex;\n  align-items: center;\n  flex-grow: ${({ width }) => (width !== undefined ? 'unset' : 1)};\n  font-family: sans-serif;\n  font-size: 12px;\n  padding: 2px 4px;\n`;\n\nconst buildTextInputElement = (\n  themeVariables: ThemeVariables\n) => css<TextInputElementProps>`\n  ${cursor('text')};\n  ${generateIndentedStyles(themeVariables)}\n  border: none;\n  box-sizing: border-box;\n  color: ${(props) =>\n    props.disabled ? themeVariables.textDisabled : themeVariables.text};\n  font-size: 12px;\n  height: 24px;\n  outline: none;\n  padding: 4px 4px;\n  width: 100%;\n\n  &:disabled {\n    background: ${themeVariables.shade3};\n  }\n`;\n\nconst buildTextareaElement = (\n  themeVariables: ThemeVariables\n) => css<TextareaElementProps>`\n  ${cursor('text')};\n  ${generateIndentedStyles(themeVariables)}\n  border: none;\n  box-sizing: border-box;\n  color: ${(props) =>\n    props.disabled ? themeVariables.textDisabled : themeVariables.text};\n  font-size: 12px;\n  height: 24px;\n  outline: none;\n  padding: 4px 4px;\n  width: 100%;\n  resize: none;\n`;\n\nconst buildToolbar = (themeVariables: ThemeVariables) => css<ToolbarProps>`\n  ${generateGroovedStyles(themeVariables)}\n  background: ${themeVariables.shade3};\n  box-sizing: border-box;\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 4px;\n  padding: 2px;\n  text-align: left;\n  width: 100%;\n`;\n\nconst generateToolbarButtonStyles = (themeVariables: ThemeVariables) => {\n  const activeStyles = css`\n    box-shadow: ${generateBorders(\n      1,\n      themeVariables.shade4,\n      themeVariables.shade1\n    )};\n\n    > * {\n      display: block;\n      position: relative;\n      left: 1px;\n      top: 1px;\n    }\n  `;\n\n  const hoverStyles = css`\n    box-shadow: ${generateBorders(\n      1,\n      themeVariables.shade1,\n      themeVariables.shade4\n    )};\n  `;\n\n  return css`\n    ${cursor('default')};\n    background: ${themeVariables.shade3};\n    border: none;\n\n    &:hover {\n      ${hoverStyles}\n    }\n\n    ${(props) =>\n      (props as unknown as { active?: boolean })?.active && activeStyles};\n    &:active {\n      ${activeStyles}\n    }\n  `;\n};\n\nconst buildToolbarButton = (\n  themeVariables: ThemeVariables\n) => css<ToolbarButtonProps>`\n  ${generateToolbarButtonStyles(themeVariables)}\n  font-size: 12px;\n  height: 100%;\n  image-rendering: pixelated;\n`;\n\nconst buildWell = (themeVariables: ThemeVariables) => css`\n  ${generateIndentedStyles(themeVariables)}\n  background: ${themeVariables.shade1};\n  padding: 2px;\n  box-sizing: border-box;\n  height: 100%;\n  width: 100%;\n  font-family: ${fontFamily};\n`;\n\nconst buildWindowContent = (themeVariables: ThemeVariables) => css`\n  ${generateIndentedStyles(themeVariables)};\n  padding: 2px;\n  font-family: sans-serif;\n  flex-grow: 1;\n  overflow: hidden;\n`;\n\nconst buildControls = (\n  themeVariables: ThemeVariables\n): ThemeBuilderConfig['controls'] => ({\n  AddressBar: buildAddressBar(),\n  AddressBarInput: buildAddressBarInput(themeVariables),\n  Button: buildButton(themeVariables),\n  CheckboxWrapper: buildCheckboxWrapper(),\n  Checkbox: buildCheckbox(themeVariables),\n  ComboBoxControl: buildComboBoxControl(themeVariables),\n  ComboBoxInput: buildComboBoxInput(themeVariables),\n  ComboBoxButton: buildComboBoxButton(themeVariables),\n  ComboBoxOptions: buildComboBoxOptions(),\n  ComboBoxOption: buildComboBoxOption(themeVariables),\n  Divider: buildDivider(themeVariables),\n  Fieldset: buildFieldset(themeVariables),\n  FieldsetLegend: buildFieldsetLegend(themeVariables),\n  Label: buildLabel(themeVariables),\n  ListBoxControl: buildListBoxControl(themeVariables),\n  ListBoxValue: buildListBoxValue(themeVariables),\n  ListBoxButton: buildListBoxButton(themeVariables),\n  ListBoxOptions: buildListBoxOptions(),\n  ListBoxOption: buildListBoxOption(themeVariables),\n  MenuBar: buildMenuBar(themeVariables),\n  MenuBarThrobber: buildMenuBarThrobber(themeVariables),\n  ProgressBar: buildProgressBar(themeVariables),\n  ProgressBarFill: buildProgressBarFill(themeVariables),\n  ...buildScrollbars(themeVariables),\n  StatusBar: buildStatusBar(),\n  ResizeHandle: buildResizeHandle(themeVariables),\n  StatusBarSection: buildStatusBarSection(themeVariables),\n  TextInputElement: buildTextInputElement(themeVariables),\n  TextareaElement: buildTextareaElement(themeVariables),\n  ...buildTimeInput(themeVariables),\n  Toolbar: buildToolbar(themeVariables),\n  ToolbarButton: buildToolbarButton(themeVariables),\n  Well: buildWell(themeVariables),\n  WindowContent: buildWindowContent(themeVariables),\n});\n\nexport default buildControls;\n","import { TaskbarButtonProps } from '@tatuarvela/wisp';\nimport { css } from 'styled-components';\n\nimport cursor from '../cursors/cursor';\nimport generateBorders from '../generateBorders';\nimport generateDitheredBackground from '../generateDitheredBackground';\nimport { ThemeBuilderConfig, ThemeVariables } from '../types';\nimport { fontFamily } from '../utils';\n\nconst buildTaskbar = (themeVariables: ThemeVariables) => css`\n  ${cursor('default')}\n  background: ${themeVariables.shade3};\n  border-top: 1px solid ${themeVariables.shade2};\n  bottom: 0;\n  box-shadow: inset 0 1px 0 0 ${themeVariables.shade1};\n  box-sizing: border-box;\n  display: flex;\n  font-size: 16px;\n  height: 28px;\n  left: 0;\n  overflow-x: visible;\n  padding: 2px;\n  position: absolute;\n  text-align: left;\n  white-space: nowrap;\n  width: 100%;\n`;\n\nconst generateTaskbarButtonStyles = (themeVariables: ThemeVariables) => {\n  const activeStyles = css`\n    ${generateDitheredBackground(themeVariables.shade2, themeVariables.shade1)};\n    box-shadow: ${generateBorders(\n        1,\n        themeVariables.shade5,\n        themeVariables.shade1\n      )},\n      ${generateBorders(2, themeVariables.shade4, 'transparent')};\n\n    > * {\n      display: inline-block;\n      position: relative;\n      left: 1px;\n      top: 1px;\n    }\n  `;\n\n  return css`\n    ${cursor('default')}\n    background: ${themeVariables.shade3};\n    border: none;\n\n    box-shadow: ${generateBorders(\n        1,\n        themeVariables.shade1,\n        themeVariables.shade5\n      )},\n      ${generateBorders(2, 'transparent', themeVariables.shade4)};\n\n    ${(props) =>\n      (props as unknown as { active?: boolean })?.active && activeStyles};\n    &:active {\n      ${activeStyles}\n    }\n  `;\n};\n\nconst buildTaskbarButton = (themeVariables: ThemeVariables) => {\n  const activeStyle = css`\n    color: ${themeVariables.shade5};\n    font-weight: bold;\n  `;\n  return css<TaskbarButtonProps>`\n    ${generateTaskbarButtonStyles(themeVariables)}\n\n    border-radius: 0;\n    color: ${themeVariables.shade5};\n    display: inline-flex;\n    font-family: ${fontFamily};\n    font-size: 12px;\n    height: 22px;\n    line-height: 18px;\n    margin-left: 2px;\n    margin-top: 1px;\n    outline: none;\n    text-align: left;\n    user-select: none;\n    width: 160px;\n\n    ${(props) => props.active && activeStyle};\n    &:active {\n      ${activeStyle}\n    }\n  `;\n};\n\nconst buildTaskbarButtonIcon = () => css`\n  display: block;\n  height: 16px;\n  width: 16px;\n  margin-right: 4px;\n  position: relative;\n  top: 1px;\n`;\n\nconst buildDesktop = (themeVariables: ThemeVariables) => css`\n  ${cursor('default')};\n  background: ${themeVariables.background};\n  background-size: 100% 100%;\n  bottom: 0;\n  box-sizing: border-box;\n  left: 0;\n  overflow: hidden;\n  position: absolute;\n  right: 0;\n  top: 0;\n  object-fit: cover;\n`;\n\nconst buildVersionInfo = () => css`\n  bottom: 30px;\n  color: white;\n  font-family: ${fontFamily};\n  font-size: 14px;\n  margin: 4px;\n  pointer-events: none;\n  position: absolute;\n  right: 0;\n  text-align: right;\n  user-select: none;\n`;\n\nconst buildElements = (\n  themeVariables: ThemeVariables\n): ThemeBuilderConfig['elements'] => ({\n  Desktop: buildDesktop(themeVariables),\n  Taskbar: buildTaskbar(themeVariables),\n  TaskbarButton: buildTaskbarButton(themeVariables),\n  TaskbarButtonIcon: buildTaskbarButtonIcon(),\n  VersionInfo: buildVersionInfo(),\n});\n\nexport default buildElements;\n","// Adapted from Barrett Sonntag's codepen: https://codepen.io/sosuke/pen/Pjoqqp\n\ntype Color = { r: number; g: number; b: number };\n\ntype HSL = {\n  h: number;\n  s: number;\n  l: number;\n};\n\ntype Wide = {\n  loss: number;\n  values: number[];\n};\n\nconst SOURCE_COLOR = 'rgb(0 0 0)';\n\nconst createColor = (r: number, g: number, b: number): Color => ({\n  r: clamp(r),\n  g: clamp(g),\n  b: clamp(b),\n});\n\nconst parseColor = (color: string): Color => {\n  const regex = /rgb\\((\\d+),?\\s*(\\d+),?\\s*(\\d+)\\)/;\n  const match = color.match(regex);\n\n  if (!match) {\n    throw new Error(\"Invalid color format. Use 'rgb(r, g, b)' or 'rgb(r g b)'\");\n  }\n\n  const r = parseInt(match[1]);\n  const g = parseInt(match[2]);\n  const b = parseInt(match[3]);\n\n  return createColor(r, g, b);\n};\n\nconst clamp = (value: number) => Math.max(0, Math.min(255, value));\n\nconst multiply = (color: Color, matrix: number[]): Color => {\n  const newR = clamp(\n    color.r * matrix[0] + color.g * matrix[1] + color.b * matrix[2]\n  );\n  const newG = clamp(\n    color.r * matrix[3] + color.g * matrix[4] + color.b * matrix[5]\n  );\n  const newB = clamp(\n    color.r * matrix[6] + color.g * matrix[7] + color.b * matrix[8]\n  );\n  return createColor(newR, newG, newB);\n};\n\nconst linear = (color: Color, slope = 1, intercept = 0): Color =>\n  createColor(\n    clamp(color.r * slope + intercept * 255),\n    clamp(color.g * slope + intercept * 255),\n    clamp(color.b * slope + intercept * 255)\n  );\n\nconst hsl = (color: Color): HSL => {\n  const r = color.r / 255;\n  const g = color.g / 255;\n  const b = color.b / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h,\n    s,\n    l = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0;\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return { h: h * 100, s: s * 100, l: l * 100 };\n};\n\nconst hueRotate = (color: Color, angle = 0): Color => {\n  angle = (angle / 180) * Math.PI;\n  const sin = Math.sin(angle);\n  const cos = Math.cos(angle);\n\n  return multiply(color, [\n    0.213 + cos * 0.787 - sin * 0.213,\n    0.715 - cos * 0.715 - sin * 0.715,\n    0.072 - cos * 0.072 + sin * 0.928,\n    0.213 - cos * 0.213 + sin * 0.143,\n    0.715 + cos * 0.285 + sin * 0.14,\n    0.072 - cos * 0.072 - sin * 0.283,\n    0.213 - cos * 0.213 - sin * 0.787,\n    0.715 - cos * 0.715 + sin * 0.715,\n    0.072 + cos * 0.928 + sin * 0.072,\n  ]);\n};\n\nconst sepia = (color: Color, value = 1): Color =>\n  multiply(color, [\n    0.393 + 0.607 * (1 - value),\n    0.769 - 0.769 * (1 - value),\n    0.189 - 0.189 * (1 - value),\n    0.349 - 0.349 * (1 - value),\n    0.686 + 0.314 * (1 - value),\n    0.168 - 0.168 * (1 - value),\n    0.272 - 0.272 * (1 - value),\n    0.534 - 0.534 * (1 - value),\n    0.131 + 0.869 * (1 - value),\n  ]);\n\nconst saturate = (color: Color, value = 1): Color =>\n  multiply(color, [\n    0.213 + 0.787 * value,\n    0.715 - 0.715 * value,\n    0.072 - 0.072 * value,\n    0.213 - 0.213 * value,\n    0.715 + 0.285 * value,\n    0.072 - 0.072 * value,\n    0.213 - 0.213 * value,\n    0.715 - 0.715 * value,\n    0.072 + 0.928 * value,\n  ]);\n\nconst invert = (color: Color, value = 1): Color =>\n  createColor(\n    clamp((value + (color.r / 255) * (1 - 2 * value)) * 255),\n    clamp((value + (color.g / 255) * (1 - 2 * value)) * 255),\n    clamp((value + (color.b / 255) * (1 - 2 * value)) * 255)\n  );\n\nconst brightness = (color: Color, value = 1): Color => linear(color, value);\n\nconst contrast = (color: Color, value = 1): Color =>\n  linear(color, value, -(0.5 * value) + 0.5);\n\nconst fix = (value: number, idx: number) => {\n  let max = 100;\n  if (idx === 2) {\n    // saturate\n    max = 7500;\n  } else if (idx === 4 || idx === 5) {\n    // brightness or contrast\n    max = 200;\n  }\n\n  if (idx === 3) {\n    // hue-rotate\n    if (value > max) {\n      value %= max;\n    } else if (value < 0) {\n      value = max + (value % max);\n    }\n  } else if (value < 0) {\n    value = 0;\n  } else if (value > max) {\n    value = max;\n  }\n  return value;\n};\n\nconst loss = (target: Color, color: Color, filters: any[]) => {\n  let tempColor = color;\n\n  tempColor = invert(tempColor, filters[0] / 100);\n  tempColor = sepia(tempColor, filters[1] / 100);\n  tempColor = saturate(tempColor, filters[2] / 100);\n  tempColor = hueRotate(tempColor, filters[3] * 3.6);\n  tempColor = brightness(tempColor, filters[4] / 100);\n  tempColor = contrast(tempColor, filters[5] / 100);\n\n  const colorHSL = hsl(tempColor);\n  const targetHSL = hsl(target);\n\n  return (\n    Math.abs(tempColor.r - target.r) +\n    Math.abs(tempColor.g - target.g) +\n    Math.abs(tempColor.b - target.b) +\n    Math.abs(colorHSL.h - targetHSL.h) +\n    Math.abs(colorHSL.s - targetHSL.s) +\n    Math.abs(colorHSL.l - targetHSL.l)\n  );\n};\n\nconst spsa = (\n  target: Color,\n  color: Color,\n  A: number,\n  a: number[],\n  c: number,\n  values: number[],\n  iters: number\n) => {\n  const alpha = 1;\n  const gamma = 0.16666666666666666;\n\n  let best = null;\n  let bestLoss = Infinity;\n  const deltas = new Array(6);\n  const highArgs = new Array(6);\n  const lowArgs = new Array(6);\n\n  for (let k = 0; k < iters; k++) {\n    const ck = c / Math.pow(k + 1, gamma);\n    for (let i = 0; i < 6; i++) {\n      deltas[i] = Math.random() > 0.5 ? 1 : -1;\n      highArgs[i] = values[i] + ck * deltas[i];\n      lowArgs[i] = values[i] - ck * deltas[i];\n    }\n\n    const lossDiff =\n      loss(target, color, highArgs) - loss(target, color, lowArgs);\n    for (let i = 0; i < 6; i++) {\n      const g = (lossDiff / (2 * ck)) * deltas[i];\n      const ak = a[i] / Math.pow(A + k + 1, alpha);\n      values[i] = fix(values[i] - ak * g, i);\n    }\n\n    const currentLoss = loss(target, color, values);\n    if (currentLoss < bestLoss) {\n      best = values.slice(0);\n      bestLoss = currentLoss;\n    }\n  }\n  return { values: best, loss: bestLoss };\n};\n\nconst solveWide = (target: Color, color: Color): Wide => {\n  const A = 5;\n  const c = 15;\n  const a = [60, 180, 18000, 600, 1.2, 1.2];\n\n  let best = { loss: Infinity, values: [] };\n  for (let i = 0; best.loss > 25 && i < 3; i++) {\n    const initial = [50, 20, 3750, 50, 100, 100];\n    const result = spsa(target, color, A, a, c, initial, 1000);\n    if (result.loss < best.loss) {\n      best = result;\n    }\n  }\n  return best;\n};\n\nconst solveNarrow = (target: Color, color: Color, wide: Wide) => {\n  const A = wide.loss;\n  const c = 2;\n  const A1 = A + 1;\n  const a = [0.25 * A1, 0.25 * A1, A1, 0.25 * A1, 0.2 * A1, 0.2 * A1];\n  return spsa(target, color, A, a, c, wide.values, 500);\n};\n\nconst css = (filters: { [x: string]: number }) => {\n  const fmt = (idx: number, multiplier = 1) =>\n    Math.round(filters[idx] * multiplier);\n  return `filter: invert(${fmt(0)}%) sepia(${fmt(1)}%) saturate(${fmt(\n    2\n  )}%) hue-rotate(${fmt(3, 3.6)}deg) brightness(${fmt(4)}%) contrast(${fmt(\n    5\n  )}%);`;\n};\n\nconst generateColorFilter = (targetColor: string) => {\n  const target = parseColor(targetColor);\n  const color = parseColor(SOURCE_COLOR);\n  const wide = solveWide(target, color);\n  const result = solveNarrow(target, color, wide);\n  return css(result.values);\n};\n\nexport default generateColorFilter;\n","import { css } from 'styled-components';\n\nimport cursor from '../cursors/cursor';\n\nconst size = 5;\nconst offset = -1;\n\nconst sharedStyle = css`\n  box-sizing: border-box;\n  position: absolute;\n`;\n\nexport const NResize = css`\n  ${sharedStyle};\n  top: ${offset}px;\n  left: ${offset}px;\n  right: ${offset}px;\n  height: ${size}px;\n  ${cursor('n-resize')};\n`;\n\nexport const NEResize = css`\n  ${sharedStyle};\n  top: ${offset}px;\n  right: ${offset}px;\n  height: ${size * 2}px;\n  width: ${size * 2}px;\n  ${cursor('ne-resize')};\n`;\n\nexport const EResize = css`\n  ${sharedStyle};\n  top: ${offset}px;\n  bottom: ${offset}px;\n  right: ${offset}px;\n  width: ${size}px;\n  ${cursor('e-resize')};\n`;\n\nexport const SEResize = css`\n  ${sharedStyle};\n  bottom: ${offset}px;\n  right: ${offset}px;\n  height: ${size * 2}px;\n  width: ${size * 2}px;\n  ${cursor('se-resize')};\n`;\n\nexport const SResize = css`\n  ${sharedStyle};\n  bottom: ${offset}px;\n  left: ${offset}px;\n  right: ${offset}px;\n  height: ${size}px;\n  ${cursor('s-resize')};\n`;\n\nexport const SWResize = css`\n  ${sharedStyle};\n  bottom: ${offset}px;\n  left: ${offset}px;\n  height: ${size * 2}px;\n  width: ${size * 2}px;\n  ${cursor('sw-resize')};\n`;\n\nexport const WResize = css`\n  ${sharedStyle};\n  top: ${offset}px;\n  bottom: ${offset}px;\n  left: ${offset}px;\n  width: ${size}px;\n  ${cursor('w-resize')};\n`;\n\nexport const NWResize = css`\n  ${sharedStyle};\n  top: ${offset}px;\n  left: ${offset}px;\n  height: ${size * 2}px;\n  width: ${size * 2}px;\n  ${cursor('nw-resize')};\n`;\n","import { ViewportWindowMargins, WindowElementProps } from '@tatuarvela/wisp';\nimport { css } from 'styled-components';\n\nimport cursor from '../cursors/cursor';\nimport generateBorders from '../generateBorders';\nimport generateColorFilter from '../generateColorFilter';\nimport close from '../icons/close.png';\nimport maximize from '../icons/maximize.png';\nimport minimize from '../icons/minimize.png';\nimport restore from '../icons/restore.png';\nimport { ThemeBuilderConfig, ThemeVariables } from '../types';\nimport { fontFamily } from '../utils';\nimport * as resizeBorder from './resizeBorder';\n\nconst buildWindowElementContent = () => css`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  font-family: ${fontFamily};\n  font-size: 12px;\n  height: 100%;\n  margin: 0;\n  overflow: hidden;\n  text-align: left;\n  user-select: none;\n  width: 100%;\n`;\n\nconst getHeight = (viewportWindowMargins: ViewportWindowMargins) =>\n  `calc(100% - ${viewportWindowMargins.top + viewportWindowMargins.bottom}px)`;\n\nconst getWidth = (viewportWindowMargins: ViewportWindowMargins) =>\n  `calc(100% - ${viewportWindowMargins.left + viewportWindowMargins.right}px)`;\n\nconst maximizedStyles = css<WindowElementProps>`\n  height: ${(props) => getHeight(props.viewportWindowMargins)} !important;\n  left: ${(props) => props.viewportWindowMargins.left} !important;\n  top: ${(props) => props.viewportWindowMargins.top} !important;\n  width: ${(props) => getWidth(props.viewportWindowMargins)} !important;\n  z-index: ${(props) => props.orderNumber} !important;\n  border-radius: 0;\n`;\n\nconst minimizedStyles = css`\n  display: none;\n`;\n\nconst buildWindowElement = (\n  themeVariables: ThemeVariables\n) => css<WindowElementProps>`\n  background: transparent;\n  box-sizing: border-box;\n  color: ${themeVariables.text};\n  display: flex;\n  flex-direction: column;\n  padding: 4px;\n  position: absolute;\n  ${cursor('default')};\n\n  &:before {\n    background: ${themeVariables.shade3};\n    bottom: 0;\n    box-shadow: ${generateBorders(\n        1,\n        themeVariables.shade2,\n        themeVariables.shade5\n      )},\n      ${generateBorders(2, themeVariables.shade1, themeVariables.shade4)};\n    content: '';\n    left: 0;\n    pointer-events: none;\n    position: absolute;\n    right: 0;\n    top: 0;\n    z-index: -1;\n  }\n\n  ${(props) => props.isMaximized && maximizedStyles}\n  ${(props) => props.isMinimized && minimizedStyles}\n`;\n\ninterface TitleBarProps {\n  isActive: boolean;\n}\n\nconst buildTitleBar = (themeVariables: ThemeVariables) => css<TitleBarProps>`\n  background: ${(props) =>\n    props.isActive\n      ? themeVariables.windowActiveBackground\n      : themeVariables.windowPassiveBackground};\n  box-sizing: border-box;\n  color: ${themeVariables.windowTitleText};\n  display: flex;\n  flex-shrink: 0;\n  font-family: ${fontFamily};\n  font-size: 12px;\n  font-weight: bold;\n  height: 18px;\n  image-rendering: pixelated;\n  line-height: 18px;\n  margin-bottom: 1px;\n  padding: 0 2px;\n  user-select: none;\n  width: 100%;\n`;\n\nconst buildTitleBarTitle = () => css`\n  position: relative;\n`;\n\nconst buildTitleBarButtons = () => css`\n  box-sizing: border-box;\n  display: flex;\n  position: absolute;\n  right: 6px;\n  top: 2px;\n  margin: 0;\n`;\n\nconst generateWindowButtonStyles = (themeVariables: ThemeVariables) => {\n  const activeStyles = css`\n    box-shadow: ${generateBorders(\n        1,\n        themeVariables.shade5,\n        themeVariables.shade1\n      )},\n      ${generateBorders(2, themeVariables.shade4, 'transparent')};\n  `;\n\n  return css`\n    background: ${themeVariables.shade3};\n    border: none;\n\n    box-shadow: ${generateBorders(\n        1,\n        themeVariables.shade1,\n        themeVariables.shade5\n      )},\n      ${generateBorders(2, 'transparent', themeVariables.shade4)};\n\n    ${(props) =>\n      (props as unknown as { active?: boolean })?.active && activeStyles};\n    &:not(:disabled):active {\n      ${activeStyles}\n    }\n  `;\n};\n\nconst buildWindowButton = (themeVariables: ThemeVariables) => css`\n  ${cursor('default')};\n  ${generateWindowButtonStyles(themeVariables)};\n\n  border-radius: 0;\n  color: ${themeVariables.shade5};\n  box-sizing: border-box;\n  height: 14px;\n  margin: 4px 0;\n  padding: 0;\n  position: relative;\n  width: 16px;\n\n  &:before,\n  &:after {\n    content: '';\n    height: 9px;\n    image-rendering: pixelated;\n    left: 3px;\n    pointer-events: none;\n    position: absolute;\n    top: 2px;\n    width: 9px;\n  }\n\n  &:not(:disabled) {\n    &:after {\n      display: none;\n    }\n  }\n\n  &:not(:disabled):active:before {\n    left: 4px;\n    top: 3px;\n  }\n\n  &:disabled {\n    &:before {\n      left: 4px;\n      top: 3px;\n      filter: invert(1);\n    }\n    &:after {\n      display: block;\n      content: '';\n      ${generateColorFilter(themeVariables.shade4)};\n    }\n  }\n`;\n\nconst buildMinimizeButton = () => css`\n  &:before,\n  &:after {\n    background-image: url('${minimize}');\n  }\n`;\n\nconst buildMaximizeButton = () => css`\n  &:before,\n  &:after {\n    background-image: url('${maximize}');\n  }\n`;\n\nconst buildUnmaximizeButton = () => css`\n  &:before,\n  &:after {\n    background-image: url('${restore}');\n  }\n`;\n\nconst buildCloseButton = () => css`\n  margin-left: 2px;\n\n  &:before,\n  &:after {\n    background-image: url('${close}');\n  }\n`;\n\nconst buildWindow = (\n  themeVariables: ThemeVariables\n): ThemeBuilderConfig['window'] => ({\n  TitleBarTitle: buildTitleBarTitle(),\n  WindowElement: buildWindowElement(themeVariables),\n  WindowElementContent: buildWindowElementContent(),\n  TitleBar: buildTitleBar(themeVariables),\n  TitleBarButtons: buildTitleBarButtons(),\n  WindowButton: buildWindowButton(themeVariables),\n  MinimizeButton: buildMinimizeButton(),\n  MaximizeButton: buildMaximizeButton(),\n  UnmaximizeButton: buildUnmaximizeButton(),\n  CloseButton: buildCloseButton(),\n  ...resizeBorder,\n});\n\nexport default buildWindow;\n"],"names":[],"sourceRoot":""}