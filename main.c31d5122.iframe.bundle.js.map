{"version":3,"file":"main.c31d5122.iframe.bundle.js","mappings":";AAuCA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAIA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AACA;;AAGA;;AAEA;ACzDA;;;;;;AAQA;AACA;;;;;;AAQA;;AAKA;;;;;;;AAOA;AACA;;;AAOA;;;;;;;AASA;AACA;;;;;;AAMA;AACA;AAIA;;AAWA;AAGA;;;;;;;;;;AAUA;;;;;AAKA;;;;;;;AASA;;;;AAIA;AACA;;;;AAIA;AACA;;AAIA;;;;;;;AAOA;;;AAKA;;;;AAOA;;;;AAMA;AACA;AACA;AACA;AAIA;;AAIA;AACA;;AAWA;AAGA;;;;;;;;;;AAgBA;AAIA;;;;;;;;;;;;AAcA;AACA;;;;;;;;AAUA;;;;;;;;;;;;;;AA2BA;;;AAGA;AAEA;;;AAZA;AACA;AACA;AACA;;AANA;;AAoBA;AAEA;AAIA;;;AAKA;;;AAGA;AAGA;AACA;;;;AAMA;;;AAGA;AAGA;AACA;;;;AAuCA;;;;;;;;AA7BA;;;;;AAMA;AA1IA;;;;AAiJA;AA3HA;AA6HA;ACtUA;AACA;;AAEA;;;;;;;;;;;;AAcA;AAEA;;AAGA;AACA;;;AAGA;;AAEA;;;;;;;;;AASA;;AAEA;;AAEA;AAIA;;;;;;;;;;AAkCA;;;AAnBA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAIA;;;AAKA;;;;;;;AAOA;;AAEA;AAKA;;;;;;;;;;AAUA;AACA;AAOA;AACA;;AAKA;;;AAGA;;;;;;;;AAUA;AACA;;;AAGA;;;;;;;AASA;AACA;;;AAGA;;;;;;;;;AAWA;AACA;;;AAGA;AACA;;;;;;;;;AAWA;AACA;;;AAGA;AACA;;;;;;;;;;;AAWA;AACA;;AAEA;;;;;;;;;AAWA;AACA;;;;;AAKA;;;;;;;;;;;AAWA;;;;;;;;;AAuBA;;;;;AAxMA;;;;;;;;;AAiMA","sources":["webpack://wisp-win-classic-theme/./src/themes/common/utils.ts","webpack://wisp-win-classic-theme/./src/themes/common/buildControls.ts","webpack://wisp-win-classic-theme/./src/themes/common/buildElements.ts","webpack://wisp-win-classic-theme/./src/themes/common/buildWindow.ts"],"sourcesContent":["import { css } from 'styled-components';\n\nimport { ThemeVariables } from './types';\n\nexport const fontFamily = \"'Microsoft Sans Serif', sans-serif;\";\n\nexport const generateBoxShadows = (\n  thickness: number,\n  topLeftColor: string,\n  bottomRightColor: string\n) => {\n  const d = thickness;\n\n  // Layers from bottom to top\n  const values: [number, number, string][] = [\n    [d, -d, topLeftColor],\n    [-d, d, bottomRightColor],\n    [-d, d - 1, topLeftColor],\n    [d, -d + 1, bottomRightColor],\n    [-d, -d, topLeftColor],\n    [d, d, bottomRightColor],\n  ];\n\n  return values\n    .reverse()\n    .map(([x, y, color]) => `${x}px ${y}px 0 0 ${color}`)\n    .join(',\\n');\n};\n\n/*\n  Levels of depth:\n    Elevated - For prominently raised elements such as buttons.\n    Accentuated - For subtly raised elements such as menu groups.\n    Grooved - For elements like fieldsets and dividers, giving an etched or channeled appearance at the same depth.\n    Recessed - For subtly lowered elements such as trays and status bars.\n    Indented - For prominently lowered elements such as in-pressed buttons and input fields.\n*/\n\nexport const generateElevatedStyles = (themeVariables: ThemeVariables) => css`\n  background: ${themeVariables.shade2};\n  border-bottom: 1px solid ${themeVariables.shade5};\n  border-left: 1px solid ${themeVariables.shade3};\n  border-right: 1px solid ${themeVariables.shade5};\n  border-top: 1px solid ${themeVariables.shade3};\n  ${generateAccentuatedStyles(themeVariables)};\n`;\n\nexport const generateAccentuatedStyles = (\n  themeVariables: ThemeVariables\n) => css`\n  box-shadow:\n    0.5px 0.5px 0 0.5px ${themeVariables.shade4},\n    0 0 0 1px ${themeVariables.shade1};\n`;\n\nexport const generateGroovedStyles = (themeVariables: ThemeVariables) => css`\n  border: 1px solid ${themeVariables.shade4};\n  box-shadow:\n    inset 1px 1px 0 0 ${themeVariables.shade1},\n    0 1px 0 0 ${themeVariables.shade1},\n    1px 0 0 0 ${themeVariables.shade1},\n    1px 1px 0 0 ${themeVariables.shade1};\n`;\n\nexport const generateRecessedStyles = (themeVariables: ThemeVariables) => css`\n  box-shadow:\n    0.5px 0.5px 0 0.5px ${themeVariables.shade1},\n    0 0 0 1px ${themeVariables.shade4};\n`;\n\nexport const generateIndentedStyles = (themeVariables: ThemeVariables) => css`\n  border-bottom: 1px solid ${themeVariables.shade3};\n  border-left: 1px solid ${themeVariables.shade5};\n  border-right: 1px solid ${themeVariables.shade3};\n  border-top: 1px solid ${themeVariables.shade5};\n  ${generateRecessedStyles(themeVariables)}\n`;\n\nexport const generateSharedButtonStyles = (themeVariables: ThemeVariables) => {\n  const activeStyles = css`\n    background: ${themeVariables.shade1};\n    ${generateIndentedStyles(themeVariables)}\n  `;\n\n  return css`\n    ${generateElevatedStyles(themeVariables)}\n    ${(props) =>\n      (props as unknown as { active?: boolean })?.active && activeStyles};\n    &:active {\n      ${activeStyles}\n    }\n  `;\n};\n","import {\n  CheckboxProps,\n  ComboBoxButtonProps,\n  ComboBoxOptionsProps,\n  ControlWrapperProps,\n  DividerProps,\n  LabelProps,\n  ListBoxOptionsProps,\n  ProgressBarFillProps,\n} from '@tatuarvela/wisp';\nimport { css } from 'styled-components';\n\nimport check from './check.png';\nimport down from './down.png';\nimport { ThemeBuilderConfig, ThemeVariables } from './types';\nimport {\n  generateElevatedStyles,\n  generateGroovedStyles,\n  generateIndentedStyles,\n  generateRecessedStyles,\n  generateSharedButtonStyles,\n} from './utils';\n\nconst buildAddressBar = () => css`\n  align-items: center;\n  box-sizing: border-box;\n  display: flex;\n  font-family: sans-serif;\n  font-size: 12px;\n  gap: 4px;\n  padding: 2px;\n`;\n\nconst buildAddressBarInput = (themeVariables: ThemeVariables) => css`\n  ${generateIndentedStyles(themeVariables)}\n\n  outline: none;\n  width: 100%;\n  flex-grow: 1;\n  font-size: 12px;\n`;\n\nconst buildButton = (themeVariables: ThemeVariables) => css`\n  ${generateSharedButtonStyles(themeVariables)}\n\n  border-radius: 0;\n  font-size: 11px;\n  padding: 2px;\n  user-select: none;\n`;\n\nconst buildCheckboxWrapper = () => {\n  const inlineStyle = css`\n    align-items: center;\n  `;\n\n  return css`\n    align-items: center;\n    box-sizing: border-box;\n    display: flex;\n    gap: 8px;\n    padding: 2px;\n\n    ${(props: ControlWrapperProps) => props.inlineLabel && inlineStyle}\n  `;\n};\n\nconst buildCheckbox = (themeVariables: ThemeVariables) => {\n  const checkedStyle = css`\n    &:before {\n      content: '';\n      background-image: url('${check}');\n      width: 7px;\n      height: 7px;\n      position: absolute;\n      top: 1px;\n      left: 1px;\n    }\n  `;\n\n  return css<CheckboxProps>`\n    ${generateIndentedStyles(themeVariables)}\n    box-sizing: border-box;\n    height: 11px;\n    width: 11px;\n    position: relative;\n\n    ${(props) => props.checked && checkedStyle}\n  `;\n};\n\nconst buildComboBoxControl = (themeVariables: ThemeVariables) => css`\n  ${generateIndentedStyles(themeVariables)}\n  display: flex;\n`;\n\nconst buildComboBoxInput = () => css`\n  outline: none;\n  font-size: 12px;\n  border: none;\n  flex-grow: 1;\n`;\n\nconst buildComboBoxButton = (\n  themeVariables: ThemeVariables\n) => css<ComboBoxButtonProps>`\n  ${generateElevatedStyles(themeVariables)}\n\n  width: 16px;\n  position: relative;\n  box-sizing: border-box;\n  margin-top: 1px;\n  margin-bottom: 1px;\n  margin-right: 1px;\n\n  &:active {\n    ${generateIndentedStyles(themeVariables)}\n  }\n\n  &:before {\n    content: '';\n    background-image: url('${down}');\n    width: 7px;\n    height: 4px;\n    position: absolute;\n    top: 5px;\n    left: 3px;\n  }\n`;\n\nconst buildComboBoxOptions = () => css<ComboBoxOptionsProps>`\n  background: white;\n  border: 1px solid black;\n  box-sizing: border-box;\n  display: ${(props) => `${props.open ? 'block' : 'none'}`};\n  left: ${(props) => `${props.left - 1}`}px;\n  margin: 0;\n  padding: 0;\n  position: fixed;\n  top: ${(props) => `${props.top + 1}`}px;\n  width: ${(props) => `${props.width + 16}`}px;\n  z-index: 100;\n`;\n\nconst buildComboBoxOption = (themeVariables: ThemeVariables) => css`\n  list-style: none;\n  font-family: sans-serif;\n  font-size: 12px;\n  padding: 4px;\n  cursor: pointer;\n  &:hover {\n    background: ${themeVariables.active};\n    color: white;\n  }\n`;\n\nconst buildDivider = (themeVariables: ThemeVariables) => {\n  const verticalStyle = css`\n    height: 100%;\n    width: 0;\n    margin: 0 4px;\n  `;\n\n  const horizontalStyle = css`\n    height: 0;\n    width: 100%;\n    margin: 4px 0;\n  `;\n\n  return css<DividerProps>`\n    ${generateRecessedStyles(themeVariables)}\n    ${({ vertical }) => (vertical ? verticalStyle : horizontalStyle)}\n  `;\n};\n\nconst buildFieldset = (themeVariables: ThemeVariables) => css`\n  ${generateGroovedStyles(themeVariables)}\n  font-family: sans-serif;\n`;\n\nconst buildFieldsetLegend = (themeVariables: ThemeVariables) => css`\n  background: ${themeVariables.shade3};\n  font-size: 12px;\n`;\n\nconst buildLabel = () => css<LabelProps>`\n  color: ${(props) => (props.disabled ? 'gray' : 'black')};\n  font-size: 12px;\n  font-family: sans-serif;\n  margin: 0;\n`;\n\nconst buildListBoxButton = (themeVariables: ThemeVariables) => css<{\n  disabled?: boolean;\n}>`\n  ${generateIndentedStyles(themeVariables)}\n\n  border-radius: 0;\n  box-sizing: border-box;\n  display: flex;\n  height: 24px;\n  padding: 3px;\n  font-size: 12px;\n  position: relative;\n  width: 100%;\n`;\n\nconst buildListBoxOptions = () => css<ListBoxOptionsProps>`\n  ${buildComboBoxOptions()}\n`;\n\nconst buildListBoxOption = (themeVariables: ThemeVariables) =>\n  buildComboBoxOption(themeVariables);\n\nconst buildMenuBar = (themeVariables: ThemeVariables) => css`\n  ${generateGroovedStyles(themeVariables)}\n\n  box-sizing: border-box;\n  display: flex;\n  font-size: 14px;\n  font-family: sans-serif;\n  flex-shrink: 0;\n  padding: 0;\n  text-align: left;\n  user-select: none;\n  white-space: nowrap;\n  width: 100%;\n`;\n\nconst buildProgressBar = (themeVariables: ThemeVariables) => css`\n  ${generateRecessedStyles(themeVariables)}\n  box-sizing: border-box;\n  font-size: 12px;\n  height: 24px;\n  max-height: 100%;\n  outline: none;\n  width: 100%;\n  overflow: hidden;\n`;\n\nconst buildProgressBarFill = (themeVariables: ThemeVariables) => {\n  const indeterminateStyle = css`\n    animation-duration: 1.5s;\n    animation-name: indeterminate-progress-bar-fill-animation;\n    animation-iteration-count: infinite;\n    animation-timing-function: steps(30, end);\n\n    @keyframes indeterminate-progress-bar-fill-animation {\n      0% {\n        transform: translateX(-100%);\n      }\n      100% {\n        transform: translateX(200%);\n      }\n    }\n  `;\n\n  const makeGradient = (color: string) => css`\n    background-image: repeating-linear-gradient(\n      to right,\n      ${color},\n      ${color} 10%,\n      ${themeVariables.shade3} 10%,\n      ${themeVariables.shade3} calc(10% + 2px)\n    );\n  `;\n\n  return css<ProgressBarFillProps>`\n    height: 100%;\n    margin: 1px;\n    width: ${(props) =>\n      props.isIndeterminate ? (props.disabled ? '0%' : '50%') : undefined};\n    ${(props) =>\n      makeGradient(\n        props.disabled ? themeVariables.shade5 : themeVariables.active\n      )}\n\n    ${(props) =>\n      !props.disabled && props.isIndeterminate && indeterminateStyle});\n  `;\n};\n\nconst buildScrollButton = (themeVariables: ThemeVariables) => css`\n  ${generateElevatedStyles(themeVariables)}\n  height: 20px;\n  width: 20px;\n`;\n\nconst buildScrollbarVerticalTrack = (themeVariables: ThemeVariables) => css`\n  height: 100%;\n  position: relative;\n  background: ${themeVariables.shade2};\n`;\n\nconst buildScrollbarVerticalThumb = (themeVariables: ThemeVariables) => css`\n  ${generateElevatedStyles(themeVariables)}\n  width: 22px;\n  position: absolute;\n  box-sizing: border-box;\n`;\n\nconst buildScrollbarHorizontalTrack = (themeVariables: ThemeVariables) => css`\n  width: 100%;\n  position: relative;\n  background: ${themeVariables.shade2};\n`;\n\nconst buildScrollbarHorizontalThumb = (themeVariables: ThemeVariables) => css`\n  ${generateElevatedStyles(themeVariables)}\n  height: 22px;\n  position: absolute;\n  box-sizing: border-box;\n`;\n\nconst buildControls = (\n  themeVariables: ThemeVariables\n): ThemeBuilderConfig['controls'] => ({\n  AddressBar: buildAddressBar(),\n  AddressBarInput: buildAddressBarInput(themeVariables),\n  Button: buildButton(themeVariables),\n  CheckboxWrapper: buildCheckboxWrapper(),\n  Checkbox: buildCheckbox(themeVariables),\n  ComboBoxControl: buildComboBoxControl(themeVariables),\n  ComboBoxInput: buildComboBoxInput(),\n  ComboBoxButton: buildComboBoxButton(themeVariables),\n  ComboBoxOptions: buildComboBoxOptions(),\n  ComboBoxOption: buildComboBoxOption(themeVariables),\n  Divider: buildDivider(themeVariables),\n  Fieldset: buildFieldset(themeVariables),\n  FieldsetLegend: buildFieldsetLegend(themeVariables),\n  Label: buildLabel(),\n  ListBoxButton: buildListBoxButton(themeVariables),\n  ListBoxOptions: buildListBoxOptions(),\n  ListBoxOption: buildListBoxOption(themeVariables),\n  MenuBar: buildMenuBar(themeVariables),\n  ProgressBar: buildProgressBar(themeVariables),\n  ProgressBarFill: buildProgressBarFill(themeVariables),\n  ScrollUpButton: buildScrollButton(themeVariables),\n  ScrollDownButton: buildScrollButton(themeVariables),\n  ScrollRightButton: buildScrollButton(themeVariables),\n  ScrollLeftButton: buildScrollButton(themeVariables),\n  ScrollbarVerticalTrack: buildScrollbarVerticalTrack(themeVariables),\n  ScrollbarVerticalThumb: buildScrollbarVerticalThumb(themeVariables),\n  ScrollbarHorizontalTrack: buildScrollbarHorizontalTrack(themeVariables),\n  ScrollbarHorizontalThumb: buildScrollbarHorizontalThumb(themeVariables),\n});\n\nexport default buildControls;\n","import { TaskbarButtonProps } from '@tatuarvela/wisp';\nimport { css } from 'styled-components';\n\nimport { ThemeBuilderConfig, ThemeVariables } from './types';\nimport { fontFamily, generateSharedButtonStyles } from './utils';\n\nconst buildTaskbar = (themeVariables: ThemeVariables) => css`\n  background: ${themeVariables.shade2};\n  border-top: 1px solid ${themeVariables.shade2};\n  bottom: 0;\n  box-shadow: inset 0 1px 0 0 ${themeVariables.shade1};\n  box-sizing: border-box;\n  display: inline-block;\n  font-size: 16px;\n  height: 28px;\n  left: 0;\n  overflow-x: visible;\n  padding: 2px;\n  position: absolute;\n  text-align: left;\n  white-space: nowrap;\n  width: 100%;\n`;\n\nconst buildTaskbarButton = (themeVariables: ThemeVariables) => {\n  const activeStyle = css`\n    color: ${themeVariables.shade5};\n    font-weight: bold;\n  `;\n  return css<TaskbarButtonProps>`\n    ${generateSharedButtonStyles(themeVariables)}\n\n    border-radius: 0;\n    color: ${themeVariables.shade5};\n    display: inline-flex;\n    font-family: ${fontFamily};\n    margin-top: 1px;\n    height: 22px;\n    margin-left: 2px;\n    outline: none;\n    text-align: left;\n    user-select: none;\n    width: 160px;\n\n    ${(props) => props.active && activeStyle};\n    &:active {\n      ${activeStyle}\n    }\n  `;\n};\n\nconst buildDesktop = (themeVariables: ThemeVariables) => css`\n  background: ${themeVariables.background};\n  background-size: 100% 100%;\n  bottom: 0;\n  box-sizing: border-box;\n  left: 0;\n  overflow: hidden;\n  position: absolute;\n  right: 0;\n  top: 0;\n  object-fit: cover;\n`;\n\nconst buildVersionInfo = () => css`\n  bottom: 30px;\n  color: white;\n  font-family: ${fontFamily};\n  font-size: 14px;\n  margin: 4px;\n  pointer-events: none;\n  position: absolute;\n  right: 0;\n  text-align: right;\n  user-select: none;\n`;\n\nconst buildElements = (\n  themeVariables: ThemeVariables\n): ThemeBuilderConfig['elements'] => ({\n  Desktop: buildDesktop(themeVariables),\n  Taskbar: buildTaskbar(themeVariables),\n  TaskbarButton: buildTaskbarButton(themeVariables),\n  VersionInfo: buildVersionInfo(),\n});\n\nexport default buildElements;\n","import { css } from 'styled-components';\n\nimport { ThemeBuilderConfig, ThemeVariables } from './types';\nimport {\n  fontFamily,\n  generateBoxShadows,\n  generateSharedButtonStyles,\n} from './utils';\n\n// TODO: Export from Wisp\ninterface ViewportWindowMargins {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n}\n\n// TODO: Export from Wisp\ninterface WindowElementProps {\n  height: number;\n  width: number;\n  positionX: number;\n  positionY: number;\n  isMinimized: boolean;\n  isMaximized: boolean;\n  orderNumber: number;\n  viewportWindowMargins: ViewportWindowMargins;\n}\n\nconst buildWindowElementContent = () => css`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  font-family: ${fontFamily};\n  font-size: 14px;\n  height: 100%;\n  margin: 0;\n  overflow: hidden;\n  padding: 4px;\n  text-align: left;\n  user-select: none;\n  width: 100%;\n`;\n\nconst getHeight = (viewportWindowMargins: ViewportWindowMargins) =>\n  `calc(100% - ${viewportWindowMargins.top + viewportWindowMargins.bottom}px)`;\n\nconst getWidth = (viewportWindowMargins: ViewportWindowMargins) =>\n  `calc(100% - ${viewportWindowMargins.left + viewportWindowMargins.right}px)`;\n\nconst maximizedStyles = css<WindowElementProps>`\n  height: ${(props) => getHeight(props.viewportWindowMargins)} !important;\n  left: ${(props) => props.viewportWindowMargins.left} !important;\n  top: ${(props) => props.viewportWindowMargins.top} !important;\n  width: ${(props) => getWidth(props.viewportWindowMargins)} !important;\n  z-index: ${(props) => props.orderNumber} !important;\n  border-radius: 0;\n`;\n\nconst minimizedStyles = css`\n  display: none;\n`;\n\nconst buildWindowElement = (\n  themeVariables: ThemeVariables\n) => css<WindowElementProps>`\n  background: transparent;\n  box-sizing: border-box;\n  color: ${themeVariables.text};\n  display: flex;\n  flex-direction: column;\n  padding: 2px;\n  position: absolute;\n\n  &:before {\n    background: ${themeVariables.shade3};\n    bottom: 2px;\n    box-shadow: ${generateBoxShadows(\n        1,\n        themeVariables.shade1,\n        themeVariables.shade3\n      )},\n      ${generateBoxShadows(2, themeVariables.shade3, themeVariables.shade5)};\n    content: '';\n    left: 2px;\n    pointer-events: none;\n    position: absolute;\n    right: 2px;\n    top: 2px;\n    z-index: -1;\n  }\n\n  ${(props) => props.isMaximized && maximizedStyles}\n  ${(props) => props.isMinimized && minimizedStyles}\n`;\n\ninterface TitleBarProps {\n  isActive: boolean;\n}\n\nconst buildTitleBar = (themeVariables: ThemeVariables) => css<TitleBarProps>`\n  background: ${(props) =>\n    props.isActive\n      ? themeVariables.windowActiveBackground\n      : themeVariables.windowPassiveBackground};\n  box-sizing: border-box;\n  color: ${themeVariables.windowTitleText};\n  flex-shrink: 0;\n  display: flex;\n  font-family: ${fontFamily};\n  font-size: 12px;\n  font-weight: bold;\n  line-height: 18px;\n  height: 18px;\n  padding: 0 4px; // TODO: Icons\n  user-select: none;\n  width: 100%;\n`;\n\nconst sharedWindowButtonStyle = (themeVariables: ThemeVariables) => css`\n  ${generateSharedButtonStyles(themeVariables)}\n\n  border-radius: 0;\n  color: ${themeVariables.shade5};\n  box-sizing: border-box;\n  height: 14px;\n  margin: 4px 1px;\n  padding: 0;\n  position: relative;\n  width: 16px;\n`;\n\nconst buildMinimizeButton = (themeVariables: ThemeVariables) => css`\n  ${sharedWindowButtonStyle(themeVariables)};\n\n  &:before {\n    border-bottom: 2px solid ${themeVariables.text};\n    content: '';\n    height: 9px;\n    left: 2px;\n    pointer-events: none;\n    position: absolute;\n    top: 0;\n    width: 8px;\n  }\n`;\n\nconst buildMaximizeButton = (themeVariables: ThemeVariables) => css`\n  ${sharedWindowButtonStyle(themeVariables)};\n\n  &:before {\n    border: 1px solid ${themeVariables.text};\n    border-top: 2px solid ${themeVariables.text};\n    content: '';\n    height: 7px;\n    left: 2px;\n    pointer-events: none;\n    position: absolute;\n    top: 1px;\n    width: 8px;\n  }\n`;\n\nconst buildUnmaximizeButton = (themeVariables: ThemeVariables) => css`\n  ${sharedWindowButtonStyle(themeVariables)};\n\n  &:before {\n    border: 1px solid ${themeVariables.text};\n    border-top: 2px solid ${themeVariables.text};\n    content: '';\n    height: 4px;\n    pointer-events: none;\n    position: absolute;\n    right: 2px;\n    top: 1px;\n    width: 5px;\n  }\n\n  &:after {\n    border: 1px solid ${themeVariables.text};\n    border-top: 2px solid ${themeVariables.text};\n    bottom: 2px;\n    background: ${themeVariables.shade2};\n    content: '';\n    left: 2px;\n    pointer-events: none;\n    position: absolute;\n    height: 4px;\n    top: 4px;\n    width: 5px;\n  }\n`;\n\nconst buildCloseButton = (themeVariables: ThemeVariables) => css`\n  ${sharedWindowButtonStyle(themeVariables)};\n\n  margin: 4px 4px;\n\n  &:before {\n    border-bottom: 2px solid ${themeVariables.text};\n    content: '';\n    left: 1px;\n    pointer-events: none;\n    position: absolute;\n    top: 5px;\n    transform: rotate(45deg);\n    width: 12px;\n  }\n\n  &:after {\n    border-bottom: 2px solid ${themeVariables.text};\n    content: '';\n    left: 1px;\n    pointer-events: none;\n    position: absolute;\n    top: 5px;\n    transform: rotate(-45deg);\n    width: 12px;\n  }\n`;\n\nconst buildWindow = (\n  themeVariables: ThemeVariables\n): ThemeBuilderConfig['window'] => ({\n  WindowElement: buildWindowElement(themeVariables),\n  WindowElementContent: buildWindowElementContent(),\n  TitleBar: buildTitleBar(themeVariables),\n  MinimizeButton: buildMinimizeButton(themeVariables),\n  MaximizeButton: buildMaximizeButton(themeVariables),\n  UnmaximizeButton: buildUnmaximizeButton(themeVariables),\n  CloseButton: buildCloseButton(themeVariables),\n});\n\nexport default buildWindow;\n"],"names":[],"sourceRoot":""}