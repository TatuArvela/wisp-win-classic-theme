{"version":3,"file":"main.4050a833.iframe.bundle.js","mappings":";AA+BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;;AAEA;AClDA;;;;;;AAcA;ACdA;AACA;;AAEA;;;;;;;;;;;;AAmBA;AAEA;;AAGA;AACA;;;AAGA;AACA;;;;;;;;;AASA;;AAEA;;AAEA;AAIA;;;;;;;;;;AAkCA;;;AAnBA;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAIA;;;AAKA;;;;;;;AAOA;;AAEA;AAKA;;;;;;;;;;AAUA;AACA;AAOA;AACA;;AAKA;;;AAGA;;;;;;;;AAUA;AACA;;;AAGA;;;;;;;AASA;AACA;;;AAGA;;;;;;;;;AAWA;AACA;;;AAGA;AACA;;;;;;;;;AAWA;AACA;;;AAGA;AACA;;;;;;;;;;;AAWA;AACA;;AAEA;;;;;;;;;AAWA;AACA;;;;;AAKA;;;;;;;;;;;AAWA;;;;;;;;;AAuBA;;;;;AAxMA;;;;;;;;;AAiMA","sources":["webpack://wisp-win-classic-theme/./src/themes/common/utils.ts","webpack://wisp-win-classic-theme/./src/themes/common/buildControls.ts","webpack://wisp-win-classic-theme/./src/themes/common/buildElements.ts","webpack://wisp-win-classic-theme/./src/themes/common/buildWindow.ts"],"sourcesContent":["import { css } from 'styled-components';\n\nimport { ThemeVariables } from './types';\n\nexport const fontFamily = \"'Microsoft Sans Serif', sans-serif;\";\n\nexport const generateBoxShadows = (\n  thickness: number,\n  topLeftColor: string,\n  bottomRightColor: string\n) => {\n  const d = thickness;\n\n  // Layers from bottom to top\n  const values: [number, number, string][] = [\n    [d, -d, topLeftColor],\n    [-d, d, bottomRightColor],\n    [-d, d - 1, topLeftColor],\n    [d, -d + 1, bottomRightColor],\n    [-d, -d, topLeftColor],\n    [d, d, bottomRightColor],\n  ];\n\n  return values\n    .reverse()\n    .map(([x, y, color]) => `${x}px ${y}px 0 0 ${color}`)\n    .join(',\\n');\n};\n\nexport const generateSharedButtonStyles = (themeVariables: ThemeVariables) => {\n  const activeStyles = css`\n    background: ${themeVariables.shade1};\n    border-bottom: 1px solid ${themeVariables.shade3};\n    border-left: 1px solid ${themeVariables.shade5};\n    border-right: 1px solid ${themeVariables.shade3};\n    border-top: 1px solid ${themeVariables.shade5};\n    box-shadow:\n      0.5px 0.5px 0 0.5px ${themeVariables.shade1},\n      0 0 0 1px ${themeVariables.shade4};\n  `;\n\n  return css`\n    background: ${themeVariables.shade2};\n    border-bottom: 1px solid ${themeVariables.shade5};\n    border-left: 1px solid ${themeVariables.shade3};\n    border-right: 1px solid ${themeVariables.shade5};\n    border-top: 1px solid ${themeVariables.shade3};\n    box-shadow:\n      0.5px 0.5px 0 0.5px ${themeVariables.shade4},\n      0 0 0 1px ${themeVariables.shade1};\n\n    ${(props) =>\n      (props as unknown as { active?: boolean })?.active && activeStyles};\n    &:active {\n      ${activeStyles}\n    }\n  `;\n};\n","import { css } from 'styled-components';\n\nimport { ThemeBuilderConfig, ThemeVariables } from './types';\nimport { generateSharedButtonStyles } from './utils';\n\nconst buildButton = (themeVariables: ThemeVariables) => css`\n  ${generateSharedButtonStyles(themeVariables)}\n\n  border-radius: 0;\n  font-size: 11px;\n  padding: 2px;\n  user-select: none;\n`;\n\nconst buildControls = (\n  themeVariables: ThemeVariables\n): ThemeBuilderConfig['controls'] => ({\n  Button: buildButton(themeVariables),\n});\n\nexport default buildControls;\n","import { css } from 'styled-components';\n\nimport { ThemeBuilderConfig, ThemeVariables } from './types';\nimport { fontFamily, generateSharedButtonStyles } from './utils';\n\nconst buildTaskbar = (themeVariables: ThemeVariables) => css`\n  background: ${themeVariables.shade2};\n  border-top: 1px solid ${themeVariables.shade2};\n  bottom: 0;\n  box-shadow: inset 0 1px 0 0 ${themeVariables.shade1};\n  box-sizing: border-box;\n  display: inline-block;\n  font-size: 16px;\n  height: 28px;\n  left: 0;\n  overflow-x: visible;\n  padding: 2px;\n  position: absolute;\n  text-align: left;\n  white-space: nowrap;\n  width: 100%;\n`;\n\n// TODO: Export from Wisp\ninterface TaskbarButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  active: boolean;\n}\n\nconst buildTaskbarButton = (themeVariables: ThemeVariables) => {\n  const activeStyle = css`\n    color: ${themeVariables.shade5};\n    font-weight: bold;\n  `;\n  return css<TaskbarButtonProps>`\n    ${generateSharedButtonStyles(themeVariables)}\n\n    border-radius: 0;\n    color: ${themeVariables.shade5};\n    font-family: ${fontFamily};\n    margin-top: 1px;\n    height: 22px;\n    margin-left: 2px;\n    outline: none;\n    text-align: left;\n    user-select: none;\n    width: 160px;\n\n    ${(props) => props.active && activeStyle};\n    &:active {\n      ${activeStyle}\n    }\n  `;\n};\n\nconst buildDesktop = (themeVariables: ThemeVariables) => css`\n  background: ${themeVariables.background};\n  background-size: 100% 100%;\n  bottom: 0;\n  box-sizing: border-box;\n  left: 0;\n  overflow: hidden;\n  position: absolute;\n  right: 0;\n  top: 0;\n  object-fit: cover;\n`;\n\nconst buildVersionInfo = () => css`\n  bottom: 30px;\n  color: white;\n  font-family: ${fontFamily};\n  font-size: 14px;\n  margin: 4px;\n  pointer-events: none;\n  position: absolute;\n  right: 0;\n  text-align: right;\n  user-select: none;\n`;\n\nconst buildElements = (\n  themeVariables: ThemeVariables\n): ThemeBuilderConfig['elements'] => ({\n  Desktop: buildDesktop(themeVariables),\n  Taskbar: buildTaskbar(themeVariables),\n  TaskbarButton: buildTaskbarButton(themeVariables),\n  VersionInfo: buildVersionInfo(),\n});\n\nexport default buildElements;\n","import { css } from 'styled-components';\n\nimport { ThemeBuilderConfig, ThemeVariables } from './types';\nimport {\n  fontFamily,\n  generateBoxShadows,\n  generateSharedButtonStyles,\n} from './utils';\n\n// TODO: Export from Wisp\ninterface ViewportWindowMargins {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n}\n\n// TODO: Export from Wisp\ninterface WindowElementProps {\n  height: number;\n  width: number;\n  positionX: number;\n  positionY: number;\n  isMinimized: boolean;\n  isMaximized: boolean;\n  orderNumber: number;\n  viewportWindowMargins: ViewportWindowMargins;\n}\n\nconst buildWindowContent = () => css`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  font-family: ${fontFamily};\n  font-size: 14px;\n  height: 100%;\n  margin: 0;\n  overflow: hidden;\n  padding: 4px;\n  text-align: left;\n  user-select: none;\n  width: 100%;\n`;\n\nconst getHeight = (viewportWindowMargins: ViewportWindowMargins) =>\n  `calc(100% - ${viewportWindowMargins.top + viewportWindowMargins.bottom}px)`;\n\nconst getWidth = (viewportWindowMargins: ViewportWindowMargins) =>\n  `calc(100% - ${viewportWindowMargins.left + viewportWindowMargins.right}px)`;\n\nconst maximizedStyles = css<WindowElementProps>`\n  height: ${(props) => getHeight(props.viewportWindowMargins)} !important;\n  left: ${(props) => props.viewportWindowMargins.left} !important;\n  top: ${(props) => props.viewportWindowMargins.top} !important;\n  width: ${(props) => getWidth(props.viewportWindowMargins)} !important;\n  z-index: ${(props) => props.orderNumber} !important;\n  border-radius: 0;\n`;\n\nconst minimizedStyles = css`\n  display: none;\n`;\n\nconst buildWindowElement = (\n  themeVariables: ThemeVariables\n) => css<WindowElementProps>`\n  background: transparent;\n  box-sizing: border-box;\n  color: ${themeVariables.text};\n  display: flex;\n  flex-direction: column;\n  padding: 2px;\n  position: absolute;\n\n  &:before {\n    background: ${themeVariables.shade3};\n    bottom: 2px;\n    box-shadow: ${generateBoxShadows(\n        1,\n        themeVariables.shade1,\n        themeVariables.shade3\n      )},\n      ${generateBoxShadows(2, themeVariables.shade3, themeVariables.shade5)};\n    content: '';\n    left: 2px;\n    pointer-events: none;\n    position: absolute;\n    right: 2px;\n    top: 2px;\n    z-index: -1;\n  }\n\n  ${(props) => props.isMaximized && maximizedStyles}\n  ${(props) => props.isMinimized && minimizedStyles}\n`;\n\ninterface TitleBarProps {\n  isActive: boolean;\n}\n\nconst buildTitleBar = (themeVariables: ThemeVariables) => css<TitleBarProps>`\n  background: ${(props) =>\n    props.isActive\n      ? themeVariables.windowActiveBackground\n      : themeVariables.windowPassiveBackground};\n  box-sizing: border-box;\n  color: ${themeVariables.windowTitleText};\n  flex-shrink: 0;\n  display: flex;\n  font-family: ${fontFamily};\n  font-size: 12px;\n  font-weight: bold;\n  line-height: 18px;\n  height: 18px;\n  padding: 0 4px; // TODO: Icons\n  user-select: none;\n  width: 100%;\n`;\n\nconst sharedWindowButtonStyle = (themeVariables: ThemeVariables) => css`\n  ${generateSharedButtonStyles(themeVariables)}\n\n  border-radius: 0;\n  color: ${themeVariables.shade5};\n  box-sizing: border-box;\n  height: 14px;\n  margin: 4px 1px;\n  padding: 0;\n  position: relative;\n  width: 16px;\n`;\n\nconst buildMinimizeButton = (themeVariables: ThemeVariables) => css`\n  ${sharedWindowButtonStyle(themeVariables)};\n\n  &:before {\n    border-bottom: 2px solid ${themeVariables.text};\n    content: '';\n    height: 9px;\n    left: 2px;\n    pointer-events: none;\n    position: absolute;\n    top: 0;\n    width: 8px;\n  }\n`;\n\nconst buildMaximizeButton = (themeVariables: ThemeVariables) => css`\n  ${sharedWindowButtonStyle(themeVariables)};\n\n  &:before {\n    border: 1px solid ${themeVariables.text};\n    border-top: 2px solid ${themeVariables.text};\n    content: '';\n    height: 7px;\n    left: 2px;\n    pointer-events: none;\n    position: absolute;\n    top: 1px;\n    width: 8px;\n  }\n`;\n\nconst buildUnmaximizeButton = (themeVariables: ThemeVariables) => css`\n  ${sharedWindowButtonStyle(themeVariables)};\n\n  &:before {\n    border: 1px solid ${themeVariables.text};\n    border-top: 2px solid ${themeVariables.text};\n    content: '';\n    height: 4px;\n    pointer-events: none;\n    position: absolute;\n    right: 2px;\n    top: 1px;\n    width: 5px;\n  }\n\n  &:after {\n    border: 1px solid ${themeVariables.text};\n    border-top: 2px solid ${themeVariables.text};\n    bottom: 2px;\n    background: ${themeVariables.shade2};\n    content: '';\n    left: 2px;\n    pointer-events: none;\n    position: absolute;\n    height: 4px;\n    top: 4px;\n    width: 5px;\n  }\n`;\n\nconst buildCloseButton = (themeVariables: ThemeVariables) => css`\n  ${sharedWindowButtonStyle(themeVariables)};\n\n  margin: 4px 4px;\n\n  &:before {\n    border-bottom: 2px solid ${themeVariables.text};\n    content: '';\n    left: 1px;\n    pointer-events: none;\n    position: absolute;\n    top: 5px;\n    transform: rotate(45deg);\n    width: 12px;\n  }\n\n  &:after {\n    border-bottom: 2px solid ${themeVariables.text};\n    content: '';\n    left: 1px;\n    pointer-events: none;\n    position: absolute;\n    top: 5px;\n    transform: rotate(-45deg);\n    width: 12px;\n  }\n`;\n\nconst buildWindow = (\n  themeVariables: ThemeVariables\n): ThemeBuilderConfig['window'] => ({\n  WindowElement: buildWindowElement(themeVariables),\n  WindowContent: buildWindowContent(),\n  TitleBar: buildTitleBar(themeVariables),\n  MinimizeButton: buildMinimizeButton(themeVariables),\n  MaximizeButton: buildMaximizeButton(themeVariables),\n  UnmaximizeButton: buildUnmaximizeButton(themeVariables),\n  CloseButton: buildCloseButton(themeVariables),\n});\n\nexport default buildWindow;\n"],"names":[],"sourceRoot":""}